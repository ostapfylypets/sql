1. Write a MongoDB query to display all the documents in the collection restaurants.
db.Restaurants.find();

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
 db.Restaurants.find({},
 {restaurant_id:1,
  name:1,
  borough:1,
  cuisine:1
 })

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
 db.Restaurants.find({},
 {restaurant_id:1,
  name:1,
  borough:1,
  cuisine:1,
  _id:0
 })

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
 db.Restaurants.find({},
 {
  restaurant_id:1,
  name:1,
  borough:1,
  address:{
  zipcode:1},
  _id:0
 })

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
 db.Restaurants.find({
     borough:"Bronx"
     })

6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.Restaurants
.find( {borough:"Bronx"})
.limit(5)

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
  db.Restaurants
 .find( {borough:"Bronx"})
 .limit(5)
 .skip(5)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
 db.Restaurants.find(
  {"grades.score":{"$gt":90}
  })

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
  db.Restaurants.find(
  { $and:[
  {"grades.score":{"$gt":80}},
  {"grades.score":{"$lt":100}}
  ]
    })

10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168
  db.Restaurants.find(
   {"address.coord":{"$lt":-95.754168}
   })

11.Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
 db.Restaurants.find({
     $and:[{ cuisine:{$ne:'American '}},
     {"grades.score":{"$gt":70}}
     ]
 })

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
/ Note : Do this query without using $and operator.
  db.Restaurants.find({
      $and:[  {"grades.score":{"$gt":70}},
    { cuisine:{$ne:'American '}},
   {"address.coord":{"$gt":-65.754168}} ]
  })

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American '
 and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed
 according to the cuisine in descending order.
 db.Restaurants.find({
      $and:[  {"grades.grade":'A'},
      { cuisine:{$ne:'American '}},
      { borough:{$ne:'Brooklyn'}} ] }
 )

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants
which contain 'Wil' as first three letters for its name
 db.Restaurants.find(
    { name: /^Wil/},
    {restaurant_id:1,
     name:1,
     borough:1,
     cuisine:1,
        _id:0}
 )

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for
those restaurants which contain 'ces' as last three letters for its name.
 db.Restaurants.find(
    { name: /ces$/},
    {restaurant_id:1,
     name:1,
     borough:1,
     cuisine:1,
        _id:0}
 )

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants
/which contain 'Reg' as three letters somewhere in its name.
     db.Restaurants.find(
    { name: /.*Reg.*/i},
    {restaurant_id:1,
     name:1,
     borough:1,
     cuisine:1,
        _id:0}
 )

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
 db.Restaurants.find(
 {   $or:
     [
     {cuisine:"American "},
     {cuisine:"Chinese"}
     ],
     borough:"Bronx"
 }
 )

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants
which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
 db.Restaurants.find(
 {   $or:
     [
     {borough:"Staten Island"},
     {borough:"Brooklyn"},
     {borough:"Bronxor"}
     ],
 },
 {
     restaurant_id:1,
     name:1,
     borough:1,
     cuisine:1,
     _id:0
 })

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are
not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
 db.Restaurants.find(
 {
   borough:{
       $nin:["Staten", "Island","Queens","Bronxor","Brooklyn"]
   }
 },
 {
     restaurant_id:1,
     name:1,
     borough:1,
     cuisine:1,
     _id:0
 })

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
 db.Restaurants.find({
   "grades.score":{"$lt":10}},
   {   restaurant_id:1,
       name:1,
       borough:1,
       cuisine:1,
       _id:0
 })

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
 db.Restaurants.find({
     $or:
     [
     {cuisine:{$nin:['American ','Chinees']}},
     {name:/^Wil/}
     ]
  },
 {restaurant_id:1,
       name:1,
       borough:1,
       cuisine:1,
       _id:0}
 )

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11
 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..

 db.Restaurants.find(
 {
    $and:
     [
       {"grades.grade":"A"},
       {"grades.score":11},
       {"grades.date":ISODate("2014-08-11T00:00:00Z")}
     ]
 },
 {
     restaurant_id:1,
     name:1,
     grades:1,
     _id:0
     }
 )

/23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the
/2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
     db.Restaurants.find(
 {
    $and:
     [
       {"grades.1.grade":"A"},
       {"grades.score":9},
       {"grades.date":ISODate("2014-08-11T00:00:00Z")}
     ]
 },
 {
     restaurant_id:1,
     name:1,
     grades:1,
     _id:0
     }
 )

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where
  //2nd element of coord array contains a value which is more than 42 and upto 52..
    // db.Restaurants.find(
 {
    $and:
     [
       {"address.coord.1":{"$gt":42}},
       {"address.coord.1":{"$lt":52}}

     ]
   },
   {
     restaurant_id:1,
     name:1,
     grades:1,
     _id:0
     }
 )

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
 db.Restaurants.find()
 .sort({name:1})

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
 db.Restaurants.find({},
 {_id:0, name:1})
 .sort({name:-1})

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
 db.Restaurants.find({},{_id:0, cuisine:1,borough:1}).sort({cuisine:1},{borough:-1})




 1) Знайти всіх дітей в яких сердня оцінка 4.2
db.getCollection('students').find({avgScore:4.2})

2) Знайди всіх дітей з 1 класу
db.getCollection('students').find({class:1})

3) Знайти всіх дітей які вивчають фізику
db.getCollection('students').find({lessons:'physics'})

4) Знайти всіх дітей, батьки яких працюють в науці ( scientist )
db.getCollection('students').find({'parents.profession':"scientist"})

5) Знайти дітей, в яких середня оцінка більша за 4
db.getCollection('students').find({avgScore:{$gt:4}})

6) Знайти найкращого учня
db.getCollection('students').find()
.sort({avgScore:-1})
.limit(1)

7) Знайти найгіршого учня
db.getCollection('students').find()
.sort({avgScore:1})
.limit(1)

8) Знайти топ 3 учнів
db.getCollection('students').find()
.sort({avgScore:-1})
.limit(3)

9) Знайти середній бал по школі
 db.getCollection("students").aggregate(
 [
   {
        $group:
          {
            _id: 0,
            avgSchool: { $avg: "$avgScore" }
          }
      }
    ]
 )

10) Знайти середній бал дітей які вивчають математику або фізику
 db.getCollection("students").aggregate(
 [
   {
          $match:{$or:[{lessons:'mathematics'},{lessons:'physics'}]}
          }
            , {
        $group:
          {
            _id: 0,
            avgSchool: { $avg: "$avgScore" }
          }
      }

    ]
 )


11) Знайти середній бал по 2 класі
db.getCollection("students").aggregate(
 [
   {
          $match:{class:2}
          }
            , {
        $group:
          {
            _id: 0,
            avgSchool: { $avg: "$avgScore" }
          }
      }

    ]
 )

12) Знайти дітей з не повною сімєю


13) Знайти батьків які не працюють


14) Не працюючих батьків влаштувати офіціантами


15) Вигнати дітей, які мають середній бал менше ніж 2.5


16) Дітям, батьки яких працюють в освіті ( teacher ) поставити 5


17) Знайти дітей які вчаться в початковій школі (до 5 класу) і вивчають фізику ( physics )


18) Знайти найуспішніший клас